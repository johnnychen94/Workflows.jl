version = "0.1"
dialect = "manifest"

[[tasks]]
    name = "init"
    id = "init"
    runner = "shell"
    [tasks.run]
        command = "julia --startup=no --project=. -e 'using Pkg; Pkg.instantiate()'"
        enable_stderr = false
        enable_stdout = false

[[tasks]]
    name = "small sum"
    id = "sum"
    groups = ["Package:Base", "Type:Benchmark"]
    runner = "shell"
    requires = ["init"]
    [tasks.matrix]
        a = [1, 3, 5]
        b = [2, 4]
        [[tasks.matrix.includes]]
            a = 6
            b = 10
        [[tasks.matrix.includes]]
            a = 2
            b = 2
        [[tasks.matrix.excludes]]
            a = 1
            b = 2
    [tasks.run]
        command = 'julia --startup=no --project=. -e "println(parse(Int, ARGS[1])+parse(Int, ARGS[2]))" ${{matrix.a}} ${{matrix.b}}'
        capture = true

[[tasks]]
    name = "exp"
    id = "exp"
    groups = ["Package:Base", "Type:Benchmark"]
    deps = ["scripts"]
    outs = ["test_outs/exp.json"]
    runner = "shell"
    requires = ["init"]
    [tasks.run]
        command = "julia --startup=no --project=. scripts/exp.jl"
        enable_stderr = false
        enable_stdout = false

[[tasks]]
    name = "summary"
    id = "summary"
    groups = ["Type:LinearAlgebra", "Type:Benchmark"]
    deps = ["summary.jl", "@__STDOUT__sum"]
    outs = ["test_outs/results.json"]
    runner = "shell"
    requires = ["exp", "sum"]
    [tasks.run]
        command = "julia --startup=no --project=. summary.jl"

[[tasks]]
    name = "print result"
    id = "report"
    runner = "shell"
    requires = ["summary"]
    [tasks.run]
        command = "julia --startup=no --project=. print.jl"
